import pickle
with open('prompts.pkl', 'rb') as f:
    prompts = pickle.load(f)

from transformers import pipeline, set_seed
seed=42
set_seed(seed)

import json


model_name='PranavBP525/phi-2-finetuned-1k_stories_100_genre'
generator = pipeline('text-generation', model=model_name, device=0)

def generate_examples(prompt_list, max_length=1000, num_return_sequences=2):
    # Initialize the text generation pipeline


    # Adjust the generator call for batch processing
    results = generator(prompt_list, max_length=max_length, num_return_sequences=num_return_sequences, do_sample=True, pad_token_id=50256) # Ensure EOS token ID is correctly set

    examples = []
    for i, result_group in enumerate(results):
        prompt = prompt_list[i % len(prompt_list)]
        example = {'prompt': prompt}
        if isinstance(result_group, list):
            # If the result group is a list, process each generated text
            for j, res in enumerate(result_group):
                answer = res['generated_text'].lstrip().removeprefix(prompt).strip()
                example[f'answer{j + 1}'] = answer
        else:
            # If the result is directly the generated text
            answer = result_group['generated_text'].lstrip().removeprefix(prompt).strip()
            example['answer1'] = answer
        examples.append(example)
        #print(json.dumps(example, indent=2))
    return examples

# Replace 'prompts' with your actual list of prompts
#prompts = ["Instruct: "+ prompt + "\nOutput:" for prompt in prompts]
generated_examples = generate_examples(prompts)

with open('input_data.json', 'w') as f:
    json.dump(generated_examples, f, indent=2)


import json
import codecs
import random

# This file is generated by Label Studio after completing annotations
data_path = 'human_preferences.json'

with codecs.open(data_path, 'r', encoding='utf-8') as f:
      data = json.load(f)


#input_data_path = '/kaggle/input/input-data/ls_input_data.json'

#with codecs.open(input_data_path, 'r', encoding='utf-8') as f:
#      input_data = json.load(f)



def create_comparision_dataset(path: str):
    with codecs.open(data_path, 'r', encoding='utf-8') as f:
          data = json.load(f)
    pairs = []
    for sample in data:
        chosen = None
        rejected = None
        for annotation in sample['annotations']:
            if annotation['result'][0]['value']['selected'] == 'left':
                chosen = sample['data']['prompt'] + '\n' + sample['data']['answer1']
                rejected = sample['data']['prompt'] + '\n' + sample['data']['answer2']
            else:
                chosen = sample['data']['prompt'] + '\n' + sample['data']['answer2']
                rejected = sample['data']['prompt'] + '\n' + sample['data']['answer1']
            pair = {
                'chosen': chosen,
                'rejected': rejected
            }
            pairs.append(pair)
    return pairs

pairs = create_comparision_dataset(data_path)
random.shuffle(pairs)

with open('preference_data.json', 'w') as f:
    json.dump(pairs, f, indent=2)
